#LyX file created by tex2lyx 2.2
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin /home/joseph/Documents/CSCE221/PA6/report/
\textclass article
\begin_preamble
\usepackage{babel}

\end_preamble
\use_default_options false
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding iso8859-15
\fontencoding T1
\font_roman "times" "default"
\font_sans "helvet" "default"
\font_typewriter "courier" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 0
\use_package cancel 0
\use_package esint 1
\use_package mathdots 0
\use_package mathtools 0
\use_package mhchem 0
\use_package stackrel 0
\use_package stmaryrd 0
\use_package undertilde 0
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date true
\justification true
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 2.5cm
\topmargin 2.5cm
\rightmargin 2.5cm
\bottommargin 2.5cm
\headheight 0cm
\headsep 0cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
The Programming Assignment Report Instructions
\begin_inset Newline newline
\end_inset

 CSCE 221
\end_layout

\begin_layout Enumerate
The description of an assignment problem.
\begin_inset Newline newline
\end_inset

 
\begin_inset space \space{}

\end_inset


\begin_inset Newline newline
\end_inset

 The purpose of this assignment is to be able to take an input of cities with info on where each city has a flight to another city. From this information, using a graph data structure and BFS, the shortest path from one city to another is determined. 
\begin_inset Newline newline
\end_inset

 
\end_layout

\begin_layout Enumerate
The description of data structures and algorithms used to solve the problem. 
\end_layout

\begin_deeper
\begin_layout Enumerate
Provide definitions of data structures by using Abstract Data Types (ADTs) 
\begin_inset Newline newline
\end_inset

 
\end_layout

\begin_deeper
\begin_layout Itemize

\series bold
Linked List
\series default
: a sequence of nodes where each node contains a pointer to the next node in the sequence. Since it is templated, a variety of data types can be passed in. 
\end_layout

\begin_layout Itemize

\series bold
Que:
\series default
 a linear data structure where operations are performed based on first-in-first-out principle. Since it is templated, a variety of data types can be passed in. 
\end_layout

\begin_layout Itemize

\series bold
String:
\series default
 a container that holds an array of characters 
\end_layout

\begin_layout Itemize

\series bold
Vector:
\series default
 a container that can hold a variety of data types. Vector has several built in functions. Also provides bounds error checking. 
\end_layout

\begin_layout Itemize

\series bold
Graph represented by an adjacency list: 
\series default
 in this assignment the graph was implemented as a vector of linked list of edges. them. 
\end_layout

\end_deeper
\begin_deeper
\begin_layout Standard

\begin_inset space \space{}

\end_inset


\begin_inset Newline newline
\end_inset

 
\end_layout

\end_deeper
\begin_layout Enumerate
Write about the ADTs implementation in C++.
\begin_inset Newline newline
\end_inset

 
\begin_inset space \space{}

\end_inset


\begin_inset Newline newline
\end_inset

 
\end_layout

\begin_deeper
\begin_layout Itemize

\series bold
Linked List
\series default
: in this assignment the C++ standard library implementation of a linked list was used. It was used in the adjacency list. 
\end_layout

\begin_layout Itemize

\series bold
Que:
\series default
 in this assignment the C++ standard library implementation of a que was used. It was used in implementing the BFS. 
\end_layout

\begin_layout Itemize

\series bold
String:
\series default
 in this assignment the C++ standard library implementation of a string was used 
\end_layout

\begin_layout Itemize

\series bold
Vector:
\series default
 in this assignment the C++ standard library implementation of a vector was used. Int was used for the ajacency list, container to hold vertices, and container for holding the edges. 
\end_layout

\begin_layout Itemize

\series bold
Graph represented by an adjacency list: 
\series default
 this was used to arrange all the cities and their connections. 
\end_layout

\end_deeper
\begin_deeper
\begin_layout Standard

\begin_inset space \space{}

\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
Describe algorithms used to solve the problem.
\begin_inset Newline newline
\end_inset

 
\end_layout

\begin_deeper
\begin_layout Itemize

\series bold
BFS/shortest distance: 
\series default
 A BFS traversal of a graph G visits all the vertices and edges of G, determines whether G is connected, computes the connected components of G, then finds the shortest path once the endpoint is found. This is done by first pushing the starting vertex to the queue. Also push this vertex to the visited vector with a NULL parent. While the queue is not empty, pop the queue. if this popped queue is the vertex being searched for, go to the vector and traverse up from the found vertex to its parents until the starting vertex is found, that is the shortest path. Else, go to the next level of the graph and enqueue each vertex in that level as well as pushing back each vertex and its parent to the visited vector. 
\end_layout

\begin_layout Itemize

\series bold
BuildGraph: 
\series default
 read in the first line to determine the number of vertices and number of edges. Iterate through the remaining lines to determine what vertices are connected to 
\begin_inset Formula $v_{i - 1}$
\end_inset

. 
\end_layout

\begin_layout Itemize

\series bold
Determine Partitioning: 
\series default
 this algorithm purpose is to determine the possibility of partition the cities into two groups such that there is no edge between two vertices in each group. Iterate through each vertex. Check if the given vertex is not in group a or group b, if so add to group a. Check if vertex is in group a but not group b, 
\end_layout

\end_deeper
\begin_layout Enumerate
Analyze the algorithms according to assignment requirements. 
\begin_inset Newline newline
\end_inset

 
\end_layout

\begin_deeper
\begin_layout Itemize

\series bold
BFS/shortest distance: 
\series default
 
\begin_inset Formula $O(V+E)$
\end_inset

 
\end_layout

\begin_layout Itemize

\series bold
BuildGraph: 
\series default
 
\begin_inset Formula $O(V+E)$
\end_inset

 
\end_layout

\begin_layout Itemize

\series bold
Determine Partitioning: 
\series default
 
\begin_inset Formula $O(V+E)$
\end_inset

 
\end_layout

\end_deeper
\end_deeper
\begin_layout Enumerate
A user guide description how to navigate your program with the instructions how to: 
\end_layout

\begin_deeper
\begin_layout Enumerate
compile the program: specify the directory and file names, etc.
\begin_inset Newline newline
\end_inset

 'g++ *.cpp -o run.out' in root directory I submitted 
\end_layout

\begin_layout Enumerate
run the program: specify the name of an executable file. 
\begin_inset Newline newline
\end_inset

 ./run.out {file-name} 
\end_layout

\end_deeper
\begin_layout Enumerate
Specifications and description of input and output formats and files 
\end_layout

\begin_deeper
\begin_layout Enumerate
The type of files: keyboard, text files, etc (if applicable). 
\begin_inset Newline newline
\end_inset

 
\begin_inset space \space{}

\end_inset


\begin_inset Newline newline
\end_inset

 Input file containing the cities and the connections between the cities 
\begin_inset Newline newline
\end_inset

 
\end_layout

\begin_layout Enumerate
A file input format: when a program requires a sequence of input items, specify the number of items per line or a line termination. Provide a sample of a required input format. 
\begin_inset Newline newline
\end_inset

 
\begin_inset space \space{}

\end_inset


\begin_inset Newline newline
\end_inset

 Example input, 
\begin_inset Newline newline
\end_inset

 7 6 
\begin_inset Newline newline
\end_inset

 1 2 -1 
\begin_inset Newline newline
\end_inset

 0 3 4 -1 
\begin_inset Newline newline
\end_inset

 0 5 6 -1 
\begin_inset Newline newline
\end_inset

 1 -1 
\begin_inset Newline newline
\end_inset

 1 -1 
\begin_inset Newline newline
\end_inset

 2 -1 
\begin_inset Newline newline
\end_inset

 2 -1 
\begin_inset Newline newline
\end_inset

 
\end_layout

\begin_layout Enumerate
Discuss possible cases when your program could crash because of incorrect input (a wrong file name, strings instead of a number, or such cases when the program expects 10 items to read and it finds only 9.)
\begin_inset Newline newline
\end_inset

 
\begin_inset space \space{}

\end_inset


\begin_inset Newline newline
\end_inset

 The program will crash if the input first line does not specify the correct number of vertixes and edges. 
\end_layout

\end_deeper
\begin_layout Enumerate
Test your program for correctness using valid, invalid, and random inputs (e.g., insertion of an item at the beginning, at the end, or at a random place into a sorted vector). Include evidence of your testing, such as an output file or screen shots with an input and the corresponding output. 
\begin_inset Newline newline
\end_inset

 
\begin_inset space \space{}

\end_inset


\begin_inset Newline newline
\end_inset

 With the following input, 
\begin_inset Newline newline
\end_inset

 4 4 
\begin_inset Newline newline
\end_inset

 1 3 -1 
\begin_inset Newline newline
\end_inset

 2 0 -1 
\begin_inset Newline newline
\end_inset

 1 3 -1 
\begin_inset Newline newline
\end_inset

 0 2 -1 
\begin_inset Newline newline
\end_inset

 Results in the following output 
\begin_inset Float figure
placement h
wide false
sideways false
status open


\begin_layout Standard
\align center

\begin_inset Graphics 
	filename input01img.png
	scale 40

\end_inset

 
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
With the following input, 
\begin_inset Newline newline
\end_inset

 5 6 
\begin_inset Newline newline
\end_inset

 1 2 -1 
\begin_inset Newline newline
\end_inset

 0 2 -1 
\begin_inset Newline newline
\end_inset

 0 1 3 4 -1 
\begin_inset Newline newline
\end_inset

 2 4 -1 
\begin_inset Newline newline
\end_inset

 2 3 -1 
\begin_inset Newline newline
\end_inset

 Results in the following output 
\begin_inset Newline newline
\end_inset

 
\begin_inset Float figure
placement h
wide false
sideways false
status open


\begin_layout Standard
\align center

\begin_inset Graphics 
	filename input2img.png
	scale 40

\end_inset

 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
With the following input, 
\begin_inset Newline newline
\end_inset

 7 6 
\begin_inset Newline newline
\end_inset

 1 2 -1 
\begin_inset Newline newline
\end_inset

 0 3 4 -1 
\begin_inset Newline newline
\end_inset

 0 5 6 -1 
\begin_inset Newline newline
\end_inset

 1 -1 
\begin_inset Newline newline
\end_inset

 1 -1 
\begin_inset Newline newline
\end_inset

 2 -1 
\begin_inset Newline newline
\end_inset

 2 -1 
\begin_inset Newline newline
\end_inset

 Results in the following output 
\begin_inset Newline newline
\end_inset

 
\begin_inset Float figure
placement h
wide false
sideways false
status open


\begin_layout Standard
\align center

\begin_inset Graphics 
	filename input3img.png
	scale 40

\end_inset

 
\end_layout

\end_inset


\end_layout

\end_deeper
\end_body
\end_document
