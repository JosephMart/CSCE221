#LyX file created by tex2lyx 2.2
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin /home/joseph/Documents/CSCE221/A1/
\textclass article
\begin_preamble
\usepackage{babel}

\end_preamble
\use_default_options false
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding iso8859-15
\fontencoding T1
\font_roman "times" "default"
\font_sans "helvet" "default"
\font_typewriter "courier" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 2
\use_package cancel 0
\use_package esint 1
\use_package mathdots 0
\use_package mathtools 0
\use_package mhchem 0
\use_package stackrel 0
\use_package stmaryrd 0
\use_package undertilde 0
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date true
\justification true
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 2.5cm
\topmargin 2.5cm
\rightmargin 2.5cm
\bottommargin 2.5cm
\headheight 0cm
\headsep 0cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
The Programming Assignment Report Instructions
\begin_inset Newline newline
\end_inset

 CSCE 221
\end_layout

\begin_layout Enumerate
The description of an assignment problem. 
\begin_inset Newline newline
\end_inset

 
\begin_inset space \space{}

\end_inset


\begin_inset Newline newline
\end_inset

 The purpose of this program assignment was to introduce to the student to the idea of data structures by giving them hands on experience by creating a basic dynamic string array called my_string 
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Enumerate
The description of data structures and algorithms used to solve the problem. 
\end_layout

\begin_deeper
\begin_layout Enumerate
Provide definitions of data structures by using Abstract Data Types (ADTs) 
\begin_inset Newline newline
\end_inset

 
\begin_inset space \space{}

\end_inset


\begin_inset Newline newline
\end_inset

 The my_string used a list data structure to store the data. The container holds characters that make up the my_string. 
\begin_inset Newline newline
\end_inset

 
\end_layout

\begin_layout Enumerate
Write about the ADTs implementation in C++.
\begin_inset Newline newline
\end_inset

 
\begin_inset space \space{}

\end_inset


\begin_inset Newline newline
\end_inset

 A pointer to the my_string is allocated on the stack. The data for the my_string is then allocated on the heap. If there is not enough room to add more characters, a new my_string object is created allowing with more memory allocation in order to hold the data. 
\begin_inset Newline newline
\end_inset

 
\end_layout

\begin_layout Enumerate
Describe algorithms used to solve the problem. 
\begin_inset Newline newline
\end_inset

 
\begin_inset space \space{}

\end_inset


\begin_inset Newline newline
\end_inset

 There were two crucial algorithms implemented in the my_string class. One was for resizing when needing to increase memory allocation. The other was for inserting a character in a certain position.
\begin_inset Newline newline
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
The first algorithm resize functions as follows. First compare if size of component being added is greater than the current capacity of the my_string. If it does, create a temp my_string to hold the current my_string. Change the capacity to be 
\begin_inset Formula $2(size + 1)$
\end_inset

. Next create a new pointer with size being the new capacity. Finally, Iterate through adding the temp values back to the newly made my_string function.
\end_layout

\begin_layout Standard
The second algorithm insert is as follows. First compare if the passed in index is greater than 0 and less than my_string size. If not, throw out of range exception. If the condition is met, do as follows. Create a temp my_string that holds all the values of the current my_string after the passed in index. The current my_string size should now be the current my_string size plus the size of the passed in my_string. Next call the resize and pass in the current my_string size. Next, add the new my_string to the current my_string starting at the passed in index. Finally, add the temp my_string back to the current my_string 
\begin_inset Newline newline
\end_inset

 
\end_layout

\end_deeper
\begin_layout Enumerate
Analyze the algorithms according to assignment requirements. 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

\backslash
begin{todolist}
\end_layout

\end_inset

 
\end_layout

\begin_layout Enumerate

\begin_inset Argument item:1
status open

\begin_layout Plain Layout

\begin_inset ERT
status collapsed

\begin_layout Plain Layout

\backslash
done
\end_layout

\end_inset


\end_layout

\end_inset

size() returns the number of characters (length) of s.
\end_layout

\begin_layout Enumerate

\begin_inset Argument item:1
status open

\begin_layout Plain Layout

\begin_inset ERT
status collapsed

\begin_layout Plain Layout

\backslash
done
\end_layout

\end_inset


\end_layout

\end_inset

capacity() returns the length in bytes of the allocated memory. It cannot be smaller than size() for the same string.
\end_layout

\begin_layout Enumerate

\begin_inset Argument item:1
status open

\begin_layout Plain Layout

\begin_inset ERT
status collapsed

\begin_layout Plain Layout

\backslash
done
\end_layout

\end_inset


\end_layout

\end_inset

empty() returns true if the string s is empty and false otherwise.
\end_layout

\begin_layout Enumerate

\begin_inset Argument item:1
status open

\begin_layout Plain Layout

\begin_inset ERT
status collapsed

\begin_layout Plain Layout

\backslash
done
\end_layout

\end_inset


\end_layout

\end_inset

operator[](i) returns the character at index i of s, without performing arrays bounds checking
\end_layout

\begin_layout Enumerate

\begin_inset Argument item:1
status open

\begin_layout Plain Layout

\begin_inset ERT
status collapsed

\begin_layout Plain Layout

\backslash
done
\end_layout

\end_inset


\end_layout

\end_inset

at(i) returns the character at index i of s, with performing arrays bounds checking. 
\begin_inset Newline newline
\end_inset

 An out_of_range exception is thrown if i is not in range of the string size (between 0 and size()-1).
\end_layout

\begin_layout Enumerate

\begin_inset Argument item:1
status open

\begin_layout Plain Layout

\begin_inset ERT
status collapsed

\begin_layout Plain Layout

\backslash
done
\end_layout

\end_inset


\end_layout

\end_inset

operator+=(q) appends the string q to s.
\end_layout

\begin_layout Enumerate

\begin_inset Argument item:1
status open

\begin_layout Plain Layout

\begin_inset ERT
status collapsed

\begin_layout Plain Layout

\backslash
done
\end_layout

\end_inset


\end_layout

\end_inset

operator+=(c) appends the character c to s.
\end_layout

\begin_layout Enumerate

\begin_inset Argument item:1
status open

\begin_layout Plain Layout

\begin_inset ERT
status collapsed

\begin_layout Plain Layout

\backslash
done
\end_layout

\end_inset


\end_layout

\end_inset

insert(i, s) inserts the string s before the position i in s and returns a reference to the resulting string. This function is optional for extra credit.
\end_layout

\begin_layout Enumerate

\begin_inset Argument item:1
status open

\begin_layout Plain Layout

\begin_inset ERT
status collapsed

\begin_layout Plain Layout

\backslash
done
\end_layout

\end_inset


\end_layout

\end_inset

default constructor creates an empty string without any memory allocation.
\end_layout

\begin_layout Enumerate

\begin_inset Argument item:1
status open

\begin_layout Plain Layout

\begin_inset ERT
status collapsed

\begin_layout Plain Layout

\backslash
done
\end_layout

\end_inset


\end_layout

\end_inset

constructor with an int argument n creates an empty string with allocated memory of size n bytes.
\end_layout

\begin_layout Enumerate

\begin_inset Argument item:1
status open

\begin_layout Plain Layout

\begin_inset ERT
status collapsed

\begin_layout Plain Layout

\backslash
done
\end_layout

\end_inset


\end_layout

\end_inset

constructor with a C-string creates a string with the content taken from the C-string.
\end_layout

\begin_layout Enumerate

\begin_inset Argument item:1
status open

\begin_layout Plain Layout

\begin_inset ERT
status collapsed

\begin_layout Plain Layout

\backslash
done
\end_layout

\end_inset


\end_layout

\end_inset

copy constructor makes a copy of the argument string.
\end_layout

\begin_layout Enumerate

\begin_inset Argument item:1
status open

\begin_layout Plain Layout

\begin_inset ERT
status collapsed

\begin_layout Plain Layout

\backslash
done
\end_layout

\end_inset


\end_layout

\end_inset

destructor deallocates allocated memory and makes an empty string.
\end_layout

\begin_layout Enumerate

\begin_inset Argument item:1
status open

\begin_layout Plain Layout

\begin_inset ERT
status collapsed

\begin_layout Plain Layout

\backslash
done
\end_layout

\end_inset


\end_layout

\end_inset

copy assignment assigns a string to another string (s = q). 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

\backslash
end{todolist}
\end_layout

\end_inset

 
\end_layout

\end_deeper
\begin_layout Enumerate
A C++ organization and implementation of the problem solution 
\end_layout

\begin_deeper
\begin_layout Enumerate
Provide a list and description of classes or interfaces used by aprogram such as classes used to implement the data structures or exceptions.
\begin_inset Newline newline
\end_inset

 
\begin_inset space \space{}

\end_inset


\begin_inset Newline newline
\end_inset

 Two includes that were used in the my_string files were iostream and stdexcept 
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Enumerate
Include in the report the class declarations from a header file (.h) and their implementation from a source file (.cpp). 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

\backslash
lstinputlisting
\end_layout

\end_inset

[language=c++,,caption=Declarations from my_string.h,firstline=4,lastline=5]
\begin_inset ERT
status collapsed

\begin_layout Plain Layout
{
\end_layout

\end_inset

/home/joseph/Documents/CSCE221/A1/221-A1-code/mystring.h
\begin_inset ERT
status collapsed

\begin_layout Plain Layout
}
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard

\begin_inset ERT
status collapsed

\begin_layout Plain Layout

\backslash
lstinputlisting
\end_layout

\end_inset

[language=c++,,caption=Usage of iostream,firstline=167,lastline=173]
\begin_inset ERT
status collapsed

\begin_layout Plain Layout
{
\end_layout

\end_inset

/home/joseph/Documents/CSCE221/A1/221-A1-code/mystring.cpp
\begin_inset ERT
status collapsed

\begin_layout Plain Layout
}
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\begin_inset ERT
status collapsed

\begin_layout Plain Layout

\backslash
lstinputlisting
\end_layout

\end_inset

[language=c++,,caption=Usage of stdexcept,firstline=150,lastline=150]
\begin_inset ERT
status collapsed

\begin_layout Plain Layout
{
\end_layout

\end_inset

/home/joseph/Documents/CSCE221/A1/221-A1-code/mystring.cpp
\begin_inset ERT
status collapsed

\begin_layout Plain Layout
}
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
Provide features of the C++ programming paradigms like Inheritance or Polymorphism in case of object oriented programming, or Templates in the case of generic programming used in your implementation. 
\begin_inset Newline newline
\end_inset

 
\begin_inset space \space{}

\end_inset


\begin_inset Newline newline
\end_inset

 The my_string class utilized OOP in order to function. 
\begin_inset Newline newline
\end_inset

 
\end_layout

\end_deeper
\begin_layout Enumerate
A user guide description how to navigate your program with the instructions how to: 
\end_layout

\begin_deeper
\begin_layout Enumerate
compile the program: specify the directory and file names, etc.
\begin_inset Newline newline
\end_inset

 
\begin_inset space \space{}

\end_inset


\begin_inset Newline newline
\end_inset

 In order to compile the program, navigate to directory 
\series bold
221-A1-code
\series default
 from the terminal. Within that directory, type the command 
\series bold
make
\series default
. 
\begin_inset Newline newline
\end_inset

 
\end_layout

\begin_layout Enumerate
run the program: specify the name of an executable file. 
\begin_inset Newline newline
\end_inset

 
\begin_inset space \space{}

\end_inset


\begin_inset Newline newline
\end_inset

 From the 
\series bold
221-A1-code
\series default
 directory, from terminal, enter 
\series bold
./my_string
\series default
 
\begin_inset Newpage pagebreak
\end_inset

 
\end_layout

\end_deeper
\begin_layout Enumerate
Specifications and description of input and output formats and files 
\end_layout

\begin_deeper
\begin_layout Enumerate
The type of files: keyboard, text files, etc (if applicable). 
\begin_inset Newline newline
\end_inset

 
\begin_inset space \space{}

\end_inset


\begin_inset Newline newline
\end_inset

 N/A 
\begin_inset Newline newline
\end_inset

 
\end_layout

\begin_layout Enumerate
A file input format: when a program requires a sequence of input items, specify the number of items per line or a line termination. Provide a sample of a required input format. 
\begin_inset Newline newline
\end_inset

 
\begin_inset space \space{}

\end_inset


\begin_inset Newline newline
\end_inset

 N/A 
\begin_inset Newline newline
\end_inset

 
\end_layout

\begin_layout Enumerate
Discuss possible cases when your program could crash because of incorrect input (a wrong file name, strings instead of a number, or such cases when the program expects 10 items to read and it finds only 9.)
\begin_inset Newline newline
\end_inset

 
\begin_inset space \space{}

\end_inset


\begin_inset Newline newline
\end_inset

 I do not believe that this program will crash but an exception will be thrown if a my_string object named 
\begin_inset Formula $A$
\end_inset

 is created and then 
\begin_inset Formula $A[i]$
\end_inset

 is implemented where 
\begin_inset Formula $i > A$
\end_inset

.capacity() 
\begin_inset Formula $\&\& \; i < 0$
\end_inset

 
\begin_inset Newline newline
\end_inset

 
\end_layout

\end_deeper
\begin_layout Enumerate
Provide types of exceptions and their purpose in your program. 
\end_layout

\begin_deeper
\begin_layout Enumerate
logical exceptions (such as deletion of an item from an empty container, etc.).
\begin_inset Newline newline
\end_inset

 
\begin_inset space \space{}

\end_inset


\begin_inset Newline newline
\end_inset

 N/A
\begin_inset Newline newline
\end_inset

 
\end_layout

\begin_layout Enumerate
runtime exception (such as division by 
\begin_inset Formula $0$
\end_inset

, etc.)
\begin_inset Newline newline
\end_inset

 
\begin_inset space \space{}

\end_inset


\begin_inset Newline newline
\end_inset

 A runtime exception will be thrown if a my_string object named 
\begin_inset Formula $A$
\end_inset

 is created and then 
\begin_inset Formula $A[i]$
\end_inset

 is implemented where 
\begin_inset Formula $i > A$
\end_inset

.capacity() 
\begin_inset Formula $\&\& \; i < 0$
\end_inset

 
\begin_inset Newline newline
\end_inset

 
\end_layout

\end_deeper
\begin_layout Enumerate
Test your program for correctness using valid, invalid, and random inputs (e.g., insertion of an item at the beginning, at the end, or at a random place into a sorted vector). Include evidence of your testing, such as an output file or screen shots with an input and the corresponding output. 
\begin_inset Newline newline
\end_inset

 
\begin_inset space \space{}

\end_inset


\begin_inset Newline newline
\end_inset

 
\begin_inset Graphics 
	filename A1img01.png
	scale 70

\end_inset

 
\begin_inset Graphics 
	filename mystring02.png
	scale 70

\end_inset

 
\begin_inset Graphics 
	filename outofrange.png
	scale 70

\end_inset

 
\end_layout

\end_body
\end_document
