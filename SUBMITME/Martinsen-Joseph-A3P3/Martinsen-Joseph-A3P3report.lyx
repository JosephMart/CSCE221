#LyX file created by tex2lyx 2.2
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin /home/joseph/Documents/CSCE221/SUBMITME/Martinsen-Joseph-A3P3/
\textclass article
\begin_preamble
\usepackage{babel}

\end_preamble
\use_default_options false
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding iso8859-15
\fontencoding T1
\font_roman "times" "default"
\font_sans "helvet" "default"
\font_typewriter "courier" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 0
\use_package cancel 0
\use_package esint 1
\use_package mathdots 0
\use_package mathtools 0
\use_package mhchem 0
\use_package stackrel 0
\use_package stmaryrd 0
\use_package undertilde 0
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date true
\justification true
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 2.5cm
\topmargin 2.5cm
\rightmargin 2.5cm
\bottommargin 2.5cm
\headheight 0cm
\headsep 0cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
The Programming Assignment Report Instructions
\begin_inset Newline newline
\end_inset

 CSCE 221
\end_layout

\begin_layout Enumerate
The description of an assignment problem.
\begin_inset Newline newline
\end_inset

 
\begin_inset space \space{}

\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
The purpose of this assignment was to create a C++ program that would allow a user to enter an expression with or without variables in infix form. The simple calculator would then evaluate the expression by utilizing a stack, a que, and postfix form. The stack and que also used the templated linked list class created in part 1. 
\begin_inset Newline newline
\end_inset

 
\begin_inset space \space{}

\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
The description of data structures and algorithms used to solve the problem.
\end_layout

\begin_deeper
\begin_layout Enumerate
Provide definitions of data structures by using Abstract Data Types (ADTs) 
\begin_inset Newline newline
\end_inset

 
\begin_inset space \space{}

\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize

\series bold
Templated Doubly Linked List
\series default
: a sequence of nodes where each node contains a pointer to the previous node and next node in the sequence. Since it is templated, a variety of data types can be passed in. 
\end_layout

\begin_layout Itemize

\series bold
Templated Linked Que:
\series default
 a linear data structure where operations are performed based on first-in-first-out principle. Since it is templated, a variety of data types can be passed in. 
\end_layout

\begin_layout Itemize

\series bold
Templated Linked Stack:
\series default
 a linear data structure where the operations are performed based on last-in-first-out principle. Since it is templated, a variety of data types can be passed in. 
\end_layout

\begin_layout Itemize

\series bold
String:
\series default
 a container that holds an array of characters 
\end_layout

\begin_layout Itemize

\series bold
Vector:
\series default
 a container that can hold a variety of data types. Vector has several built in functions. Also provides bounds error checking. 
\end_layout

\begin_layout Itemize

\series bold
Token:
\series default
 a container that references a character to a value and/or weight. 
\end_layout

\end_deeper
\begin_deeper
\begin_layout Standard

\begin_inset space \space{}

\end_inset


\begin_inset Newline newline
\end_inset

 
\end_layout

\end_deeper
\begin_layout Enumerate
Write about the ADTs implementation in C++. 
\begin_inset Newline newline
\end_inset

 
\begin_inset space \space{}

\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize

\series bold
Templated Doubly Linked List:
\series default
 a list of doubly linked nodes. This data type has a constructor, copy constructor, desctructor, assignment operator, get first node pointer, get after last node, check if list is empty, return first node, return last node, insert a new node to the first position, remove the first node, insert a node in the last position, and remove last node. An overloaded output stream operator was used to display the all the nodes in the list. Finally everything was templated for use with a variety of data types.
\end_layout

\begin_layout Itemize

\series bold
Templated Linked Que:
\series default
 contains a private doubly linked list variable. Functions include a constructor, copy constructor, destructor, return first element in que, check if que is empty, enqueue an item, dequeue an item, and an accessor function for the doubly linked list. An overloaded output stream operator was used to display the all the elements in the que. Finally everything was templated for use with a variety of data types.
\end_layout

\begin_layout Itemize

\series bold
Templated Linked Stack:
\series default
 contains a private doubly linked list variable. Functions include a constructor, destructor, check if stack is empty, push an element to the stack, pop the top element of the stack, get top of the stack, and an accessor function for the doubly linked list. An overloaded output stream operator was used to display the all the elements in the stack. Finally everything was templated for use with a variety of data types.
\end_layout

\begin_layout Itemize

\series bold
String:
\series default
 a constant char array
\end_layout

\begin_layout Itemize

\series bold
Vector:
\series default
 a container that holds a list of elements that can be accessed using an iterator.
\end_layout

\begin_layout Itemize

\series bold
Token:
\series default
 a struct that I created to hold an elements kind, value, and weight. Functions include a checker if element is an operator, checker if element is an operand, checker if an element is a number, checker if an element is a variable, setter functions that sets the value, function to convert character to a double, and a get operator weight function. 
\end_layout

\end_deeper
\begin_deeper
\begin_layout Standard

\begin_inset space \space{}

\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
Describe algorithms used to solve the problem.
\begin_inset Newline newline
\end_inset

 
\begin_inset space \space{}

\end_inset


\begin_inset Newline newline
\end_inset

 
\end_layout

\begin_deeper
\begin_layout Itemize

\begin_inset Formula $Parser::toPostfix()$
\end_inset

 this functions converts a vector of tokens in infix form to an equivalent postfix form. This functions iterates through each token in the vector. If the token is an operand, enqueue the operand until the next item is not an operand. If the token was an close parenthesis, pop items off the stack and enqueue that item until a left parenthesis is reached. If the token is an open parenthesis, push the item to the stack. if the token is a #, pop an item of the stack and enqueue it until the stack is empty. Else, pop an item off the stack and enqueue it until the top item of the stack's weight is greater or equal to the tokens weight. Then enqueue the item. Finally, pop items off the stack and enqueue them until the stack is empty. Return the que. 
\end_layout

\begin_layout Itemize

\begin_inset Formula $Token::get\_operator\_weight()$
\end_inset

 if kind is ( or ), weight is 1, if kind is 
\begin_inset Formula $+$
\end_inset

 or 
\begin_inset Formula $-$
\end_inset

, weight is 2, if kind is 
\begin_inset Formula $*$
\end_inset

 or 
\begin_inset Formula $/$
\end_inset

, weight is 3, if kind is ‸, weight is 4, if kind is ˖͂, weight is 5. Return weight 
\end_layout

\begin_layout Itemize

\begin_inset Formula $Evaluator::evaluate:$
\end_inset

 taken in operator, v1, and v2. If operator is 
\begin_inset Formula $+$
\end_inset

, add v1 and v2. If operator is 
\begin_inset Formula $-$
\end_inset

, subtract v2 from v1. If operator is 
\begin_inset Formula $*$
\end_inset

, multiply v1 and v2. If operator is ‸, raise v1 to the power of v2. If operator is 
\begin_inset Formula $/$
\end_inset

 and v2 is not 0, divide v1 by v2. If v2 was 0, throw a division by 0 exception. 
\end_layout

\begin_layout Itemize

\begin_inset Formula $Evaluator::getValue(): $
\end_inset

 Set sign to be 1. While first item in que is not #, if first item in que is ˖͂, set sign to 
\begin_inset Formula $-1$
\end_inset

 and dequeue the item. If first item in que is a space, deqeue it. If first item inn que is an operand, deque the operand and string stream it into ss until a space is reached. Input the string stream into a double. Multiply the double by the current sign value. Set sign value to 1. Push the number to the stack. If the first item in the que is an operator, evaluate that operator while dequeueing (so many vowels in a row!) it along with the the two next popable items on the stack. Push that evaluated value to the stack. Else, return the last popped value of the stack. 
\end_layout

\end_deeper
\begin_deeper
\begin_layout Standard

\begin_inset space \space{}

\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
Analyze the algorithms according to assignment requirements. 
\begin_inset Newline newline
\end_inset

 
\begin_inset space \space{}

\end_inset


\begin_inset Newline newline
\end_inset

 
\end_layout

\begin_deeper
\begin_layout Itemize

\begin_inset Formula $Parser::toPostfix(): \; O(n)$
\end_inset

 
\end_layout

\begin_layout Itemize

\begin_inset Formula $Token::get\_operator\_weight(): \; O(1)$
\end_inset

 
\end_layout

\begin_layout Itemize

\begin_inset Formula $Evaluator::evaluate: \; O(1)$
\end_inset

 
\end_layout

\begin_layout Itemize

\begin_inset Formula $Evaluator::getValue(): \; O(n)$
\end_inset

 
\end_layout

\end_deeper
\begin_deeper
\begin_layout Standard

\begin_inset space \space{}

\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\end_deeper
\end_deeper
\begin_layout Enumerate
A C++ organization and implementation of the problem solution 
\end_layout

\begin_deeper
\begin_layout Enumerate
Provide a list and description of classes or interfaces used by a program such as classes used to implement the data structures or exceptions.
\begin_inset Newline newline
\end_inset

 
\begin_inset space \space{}

\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize

\series bold
Templated Linked Que:
\series default
 contains a private doubly linked list variable. Functions include a constructor, copy constructor, destructor, return first element in que, check if que is empty, enqueue an item, dequeue an item, and an accessor function for the doubly linked list. An overloaded output stream operator was used to display the all the elements in the que. Finally everything was templated for use with a variety of data types.
\end_layout

\begin_layout Itemize

\series bold
Templated Linked Stack:
\series default
 contains a private doubly linked list variable. Functions include a constructor, destructor, check if stack is empty, push an element to the stack, pop the top element of the stack, get top of the stack, and an accessor function for the doubly linked list. An overloaded output stream operator was used to display the all the elements in the stack. Finally everything was templated for use with a variety of data types. 
\end_layout

\end_deeper
\begin_deeper
\begin_layout Standard

\begin_inset space \space{}

\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\end_deeper
\end_deeper
\begin_layout Enumerate
A user guide description how to navigate your program with the instructions how to: 
\end_layout

\begin_deeper
\begin_layout Enumerate
compile the program: specify the directory and file names, etc.
\begin_inset Newline newline
\end_inset

 
\begin_inset space \space{}

\end_inset


\begin_inset Newline newline
\end_inset

 Make sure you are in the directory "
\begin_inset space ~

\end_inset

/Martinsen-Joseph-A3P3/Martinsen-Joseph-A3P3code/" 
\begin_inset Newline newline
\end_inset

 Compile the program with "make" 
\end_layout

\begin_layout Enumerate
run the program: specify the name of an executable file. 
\begin_inset Newline newline
\end_inset

 
\begin_inset space \space{}

\end_inset


\begin_inset Newline newline
\end_inset

 Run the program with "./run-main" 
\begin_inset Newpage pagebreak
\end_inset

 
\end_layout

\end_deeper
\begin_layout Enumerate
Specifications and description of input and output formats and files 
\end_layout

\begin_deeper
\begin_layout Enumerate
The type of files: keyboard, text files, etc (if applicable). 
\begin_inset Newline newline
\end_inset

 
\begin_inset space \space{}

\end_inset


\begin_inset Newline newline
\end_inset

 No input or output files 
\begin_inset Newline newline
\end_inset

 
\begin_inset space \space{}

\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Enumerate
A file input format: when a program requires a sequence of input items, specify the number of items per line or a line termination. Provide a sample of a required input format. 
\begin_inset Newline newline
\end_inset

 
\begin_inset space \space{}

\end_inset


\begin_inset Newline newline
\end_inset

 Not applicable
\end_layout

\begin_layout Enumerate
Discuss possible cases when your program could crash because of incorrect input (a wrong file name, strings instead of a number, or such cases when the program expects 10 items to read and it finds only 9.)
\begin_inset Newline newline
\end_inset

 
\begin_inset space \space{}

\end_inset


\begin_inset Newline newline
\end_inset

 Should not fail 
\begin_inset Newline newline
\end_inset

 
\end_layout

\end_deeper
\begin_layout Enumerate
Provide types of exceptions and their purpose in your program. 
\end_layout

\begin_deeper
\begin_layout Enumerate
logical exceptions (such as deletion of an item from an empty container, etc.).
\begin_inset Newline newline
\end_inset

 
\begin_inset space \space{}

\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
QueueEmptyException 
\end_layout

\begin_layout Itemize
StackEmptyException 
\end_layout

\end_deeper
\begin_deeper
\begin_layout Standard

\begin_inset space \space{}

\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
runtime exception (such as division by 
\begin_inset Formula $0$
\end_inset

, etc.)
\begin_inset Newline newline
\end_inset

 
\begin_inset space \space{}

\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize

\begin_inset Formula $DivisionByZeroException()$
\end_inset

 in evaluator.h 
\end_layout

\end_deeper
\begin_deeper
\begin_layout Standard

\begin_inset space \space{}

\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\end_deeper
\end_deeper
\begin_layout Enumerate
Test your program for correctness using valid, invalid, and random inputs (e.g., insertion of an item at the beginning, at the end, or at a random place into a sorted vector). Include evidence of your testing, such as an output file or screen shots with an input and the corresponding output.
\end_layout

\begin_deeper
\begin_layout Standard

\begin_inset Float figure
placement h
wide false
sideways false
status open


\begin_layout Standard
\align center

\begin_inset Graphics 
	filename img1.png
	scale 30

\end_inset

 
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\begin_inset Float figure
placement h
wide false
sideways false
status open


\begin_layout Standard
\align center

\begin_inset Graphics 
	filename img2.png
	scale 30

\end_inset

 
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\begin_inset Float figure
placement h
wide false
sideways false
status open


\begin_layout Standard
\align center

\begin_inset Graphics 
	filename img3.png
	scale 30

\end_inset

 
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\begin_inset Float figure
placement h
wide false
sideways false
status open


\begin_layout Standard
\align center

\begin_inset Graphics 
	filename img4.png
	scale 30

\end_inset

 
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\begin_inset Float figure
placement h
wide false
sideways false
status open


\begin_layout Standard
\align center

\begin_inset Graphics 
	filename img5.png
	scale 30

\end_inset

 
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\begin_inset Float figure
placement h
wide false
sideways false
status open


\begin_layout Standard
\align center

\begin_inset Graphics 
	filename img6.png
	scale 30

\end_inset

 
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\begin_inset Float figure
placement h
wide false
sideways false
status open


\begin_layout Standard
\align center

\begin_inset Graphics 
	filename img7.png
	scale 30

\end_inset

 
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\begin_inset Float figure
placement h
wide false
sideways false
status open


\begin_layout Standard
\align center

\begin_inset Graphics 
	filename img8.png
	scale 30

\end_inset

 
\end_layout

\end_inset


\end_layout

\end_deeper
\end_body
\end_document
